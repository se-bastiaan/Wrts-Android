package nl.digischool.wrts.database;

import de.greenrobot.dao.DaoException;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WORD_LIST.
 */
public class WordList {

    private Long id;
    private Integer result_count;
    /** Not-null value. */
    private String title;
    /** Not-null value. */
    private String created_on;
    /** Not-null value. */
    private String updated_on;
    private String lang_a;
    private String lang_b;
    private String lang_c;
    private String lang_d;
    private String lang_e;
    private String lang_f;
    private String lang_g;
    private String lang_h;
    private String lang_i;
    private String lang_j;
    private Boolean shared;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WordListDao myDao;

    private List<Word> words;

    public WordList() {
    }

    public WordList(Long id) {
        this.id = id;
    }

    public WordList(Long id, Integer result_count, String title, String created_on, String updated_on, String lang_a, String lang_b, String lang_c, String lang_d, String lang_e, String lang_f, String lang_g, String lang_h, String lang_i, String lang_j, Boolean shared) {
        this.id = id;
        this.result_count = result_count;
        this.title = title;
        this.created_on = created_on;
        this.updated_on = updated_on;
        this.lang_a = lang_a;
        this.lang_b = lang_b;
        this.lang_c = lang_c;
        this.lang_d = lang_d;
        this.lang_e = lang_e;
        this.lang_f = lang_f;
        this.lang_g = lang_g;
        this.lang_h = lang_h;
        this.lang_i = lang_i;
        this.lang_j = lang_j;
        this.shared = shared;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWordListDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getResult_count() {
        return result_count;
    }

    public void setResult_count(Integer result_count) {
        this.result_count = result_count;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    /** Not-null value. */
    public String getCreated_on() {
        return created_on;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreated_on(String created_on) {
        this.created_on = created_on;
    }

    /** Not-null value. */
    public String getUpdated_on() {
        return updated_on;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdated_on(String updated_on) {
        this.updated_on = updated_on;
    }

    public String getLang_a() {
        return lang_a;
    }

    public void setLang_a(String lang_a) {
        this.lang_a = lang_a;
    }

    public String getLang_b() {
        return lang_b;
    }

    public void setLang_b(String lang_b) {
        this.lang_b = lang_b;
    }

    public String getLang_c() {
        return lang_c;
    }

    public void setLang_c(String lang_c) {
        this.lang_c = lang_c;
    }

    public String getLang_d() {
        return lang_d;
    }

    public void setLang_d(String lang_d) {
        this.lang_d = lang_d;
    }

    public String getLang_e() {
        return lang_e;
    }

    public void setLang_e(String lang_e) {
        this.lang_e = lang_e;
    }

    public String getLang_f() {
        return lang_f;
    }

    public void setLang_f(String lang_f) {
        this.lang_f = lang_f;
    }

    public String getLang_g() {
        return lang_g;
    }

    public void setLang_g(String lang_g) {
        this.lang_g = lang_g;
    }

    public String getLang_h() {
        return lang_h;
    }

    public void setLang_h(String lang_h) {
        this.lang_h = lang_h;
    }

    public String getLang_i() {
        return lang_i;
    }

    public void setLang_i(String lang_i) {
        this.lang_i = lang_i;
    }

    public String getLang_j() {
        return lang_j;
    }

    public void setLang_j(String lang_j) {
        this.lang_j = lang_j;
    }

    public Boolean getShared() {
        return shared;
    }

    public void setShared(Boolean shared) {
        this.shared = shared;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Word> getWords() {
        if (words == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WordDao targetDao = daoSession.getWordDao();
            List<Word> wordsNew = targetDao._queryWordList_Words(id);
            synchronized (this) {
                if(words == null) {
                    words = wordsNew;
                }
            }
        }
        return words;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWords() {
        words = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
