package nl.digischool.wrts.database;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CHANGES.
 */
public class Changes {

    private Long id;
    private int type;
    private long list_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChangesDao myDao;

    private WordList wordList;
    private Long wordList__resolvedKey;


    public Changes() {
    }

    public Changes(Long id) {
        this.id = id;
    }

    public Changes(Long id, int type, long list_id) {
        this.id = id;
        this.type = type;
        this.list_id = list_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChangesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public long getList_id() {
        return list_id;
    }

    public void setList_id(long list_id) {
        this.list_id = list_id;
    }

    /** To-one relationship, resolved on first access. */
    public WordList getWordList() {
        long __key = this.list_id;
        if (wordList__resolvedKey == null || !wordList__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WordListDao targetDao = daoSession.getWordListDao();
            WordList wordListNew = targetDao.load(__key);
            synchronized (this) {
                wordList = wordListNew;
            	wordList__resolvedKey = __key;
            }
        }
        return wordList;
    }

    public void setWordList(WordList wordList) {
        if (wordList == null) {
            throw new DaoException("To-one property 'list_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.wordList = wordList;
            list_id = wordList.getId();
            wordList__resolvedKey = list_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
