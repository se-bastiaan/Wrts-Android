package nl.digischool.wrts.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WORD_LIST.
*/
public class WordListDao extends AbstractDao<WordList, Long> {

    public static final String TABLENAME = "WORD_LIST";

    /**
     * Properties of entity WordList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Result_count = new Property(1, Integer.class, "result_count", false, "RESULT_COUNT");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Created_on = new Property(3, String.class, "created_on", false, "CREATED_ON");
        public final static Property Updated_on = new Property(4, String.class, "updated_on", false, "UPDATED_ON");
        public final static Property Lang_a = new Property(5, String.class, "lang_a", false, "LANG_A");
        public final static Property Lang_b = new Property(6, String.class, "lang_b", false, "LANG_B");
        public final static Property Lang_c = new Property(7, String.class, "lang_c", false, "LANG_C");
        public final static Property Lang_d = new Property(8, String.class, "lang_d", false, "LANG_D");
        public final static Property Lang_e = new Property(9, String.class, "lang_e", false, "LANG_E");
        public final static Property Lang_f = new Property(10, String.class, "lang_f", false, "LANG_F");
        public final static Property Lang_g = new Property(11, String.class, "lang_g", false, "LANG_G");
        public final static Property Lang_h = new Property(12, String.class, "lang_h", false, "LANG_H");
        public final static Property Lang_i = new Property(13, String.class, "lang_i", false, "LANG_I");
        public final static Property Lang_j = new Property(14, String.class, "lang_j", false, "LANG_J");
        public final static Property Shared = new Property(15, Boolean.class, "shared", false, "SHARED");
    };

    private DaoSession daoSession;


    public WordListDao(DaoConfig config) {
        super(config);
    }
    
    public WordListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WORD_LIST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RESULT_COUNT' INTEGER," + // 1: result_count
                "'TITLE' TEXT NOT NULL ," + // 2: title
                "'CREATED_ON' TEXT NOT NULL ," + // 3: created_on
                "'UPDATED_ON' TEXT NOT NULL ," + // 4: updated_on
                "'LANG_A' TEXT," + // 5: lang_a
                "'LANG_B' TEXT," + // 6: lang_b
                "'LANG_C' TEXT," + // 7: lang_c
                "'LANG_D' TEXT," + // 8: lang_d
                "'LANG_E' TEXT," + // 9: lang_e
                "'LANG_F' TEXT," + // 10: lang_f
                "'LANG_G' TEXT," + // 11: lang_g
                "'LANG_H' TEXT," + // 12: lang_h
                "'LANG_I' TEXT," + // 13: lang_i
                "'LANG_J' TEXT," + // 14: lang_j
                "'SHARED' INTEGER);"); // 15: shared
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WORD_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WordList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer result_count = entity.getResult_count();
        if (result_count != null) {
            stmt.bindLong(2, result_count);
        }
        stmt.bindString(3, entity.getTitle());
        stmt.bindString(4, entity.getCreated_on());
        stmt.bindString(5, entity.getUpdated_on());
 
        String lang_a = entity.getLang_a();
        if (lang_a != null) {
            stmt.bindString(6, lang_a);
        }
 
        String lang_b = entity.getLang_b();
        if (lang_b != null) {
            stmt.bindString(7, lang_b);
        }
 
        String lang_c = entity.getLang_c();
        if (lang_c != null) {
            stmt.bindString(8, lang_c);
        }
 
        String lang_d = entity.getLang_d();
        if (lang_d != null) {
            stmt.bindString(9, lang_d);
        }
 
        String lang_e = entity.getLang_e();
        if (lang_e != null) {
            stmt.bindString(10, lang_e);
        }
 
        String lang_f = entity.getLang_f();
        if (lang_f != null) {
            stmt.bindString(11, lang_f);
        }
 
        String lang_g = entity.getLang_g();
        if (lang_g != null) {
            stmt.bindString(12, lang_g);
        }
 
        String lang_h = entity.getLang_h();
        if (lang_h != null) {
            stmt.bindString(13, lang_h);
        }
 
        String lang_i = entity.getLang_i();
        if (lang_i != null) {
            stmt.bindString(14, lang_i);
        }
 
        String lang_j = entity.getLang_j();
        if (lang_j != null) {
            stmt.bindString(15, lang_j);
        }
 
        Boolean shared = entity.getShared();
        if (shared != null) {
            stmt.bindLong(16, shared ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(WordList entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WordList readEntity(Cursor cursor, int offset) {
        WordList entity = new WordList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // result_count
            cursor.getString(offset + 2), // title
            cursor.getString(offset + 3), // created_on
            cursor.getString(offset + 4), // updated_on
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lang_a
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lang_b
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lang_c
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lang_d
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lang_e
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lang_f
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lang_g
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lang_h
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lang_i
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // lang_j
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // shared
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WordList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResult_count(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitle(cursor.getString(offset + 2));
        entity.setCreated_on(cursor.getString(offset + 3));
        entity.setUpdated_on(cursor.getString(offset + 4));
        entity.setLang_a(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLang_b(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLang_c(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLang_d(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLang_e(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLang_f(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLang_g(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLang_h(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLang_i(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLang_j(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setShared(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WordList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WordList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
