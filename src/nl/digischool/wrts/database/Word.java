package nl.digischool.wrts.database;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WORD.
 */
public class Word {

    private Long id;
    private long list_id;
    private String word_a;
    private String word_b;
    private String word_c;
    private String word_d;
    private String word_e;
    private String word_f;
    private String word_g;
    private String word_h;
    private String word_i;
    private String word_j;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WordDao myDao;

    private WordList wordList;
    private Long wordList__resolvedKey;


    public Word() {
    }

    public Word(Long id) {
        this.id = id;
    }

    public Word(Long id, long list_id, String word_a, String word_b, String word_c, String word_d, String word_e, String word_f, String word_g, String word_h, String word_i, String word_j) {
        this.id = id;
        this.list_id = list_id;
        this.word_a = word_a;
        this.word_b = word_b;
        this.word_c = word_c;
        this.word_d = word_d;
        this.word_e = word_e;
        this.word_f = word_f;
        this.word_g = word_g;
        this.word_h = word_h;
        this.word_i = word_i;
        this.word_j = word_j;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getList_id() {
        return list_id;
    }

    public void setList_id(long list_id) {
        this.list_id = list_id;
    }

    public String getWord_a() {
        return word_a;
    }

    public void setWord_a(String word_a) {
        this.word_a = word_a;
    }

    public String getWord_b() {
        return word_b;
    }

    public void setWord_b(String word_b) {
        this.word_b = word_b;
    }

    public String getWord_c() {
        return word_c;
    }

    public void setWord_c(String word_c) {
        this.word_c = word_c;
    }

    public String getWord_d() {
        return word_d;
    }

    public void setWord_d(String word_d) {
        this.word_d = word_d;
    }

    public String getWord_e() {
        return word_e;
    }

    public void setWord_e(String word_e) {
        this.word_e = word_e;
    }

    public String getWord_f() {
        return word_f;
    }

    public void setWord_f(String word_f) {
        this.word_f = word_f;
    }

    public String getWord_g() {
        return word_g;
    }

    public void setWord_g(String word_g) {
        this.word_g = word_g;
    }

    public String getWord_h() {
        return word_h;
    }

    public void setWord_h(String word_h) {
        this.word_h = word_h;
    }

    public String getWord_i() {
        return word_i;
    }

    public void setWord_i(String word_i) {
        this.word_i = word_i;
    }

    public String getWord_j() {
        return word_j;
    }

    public void setWord_j(String word_j) {
        this.word_j = word_j;
    }

    /** To-one relationship, resolved on first access. */
    public WordList getWordList() {
        long __key = this.list_id;
        if (wordList__resolvedKey == null || !wordList__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WordListDao targetDao = daoSession.getWordListDao();
            WordList wordListNew = targetDao.load(__key);
            synchronized (this) {
                wordList = wordListNew;
            	wordList__resolvedKey = __key;
            }
        }
        return wordList;
    }

    public void setWordList(WordList wordList) {
        if (wordList == null) {
            throw new DaoException("To-one property 'list_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.wordList = wordList;
            list_id = wordList.getId();
            wordList__resolvedKey = list_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
